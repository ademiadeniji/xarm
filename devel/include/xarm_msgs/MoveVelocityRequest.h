// Generated by gencpp from file xarm_msgs/MoveVelocityRequest.msg
// DO NOT EDIT!


#ifndef XARM_MSGS_MESSAGE_MOVEVELOCITYREQUEST_H
#define XARM_MSGS_MESSAGE_MOVEVELOCITYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xarm_msgs
{
template <class ContainerAllocator>
struct MoveVelocityRequest_
{
  typedef MoveVelocityRequest_<ContainerAllocator> Type;

  MoveVelocityRequest_()
    : speeds()
    , is_sync(false)
    , is_tool_coord(false)
    , duration(0.0)  {
    }
  MoveVelocityRequest_(const ContainerAllocator& _alloc)
    : speeds(_alloc)
    , is_sync(false)
    , is_tool_coord(false)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _speeds_type;
  _speeds_type speeds;

   typedef uint8_t _is_sync_type;
  _is_sync_type is_sync;

   typedef uint8_t _is_tool_coord_type;
  _is_tool_coord_type is_tool_coord;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveVelocityRequest_

typedef ::xarm_msgs::MoveVelocityRequest_<std::allocator<void> > MoveVelocityRequest;

typedef boost::shared_ptr< ::xarm_msgs::MoveVelocityRequest > MoveVelocityRequestPtr;
typedef boost::shared_ptr< ::xarm_msgs::MoveVelocityRequest const> MoveVelocityRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xarm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'xarm_msgs': ['/home/stepjam/catkin_ws/src/xarm_ros/xarm_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ff5ed26eb25726c663dac7efa05cc61";
  }

  static const char* value(const ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ff5ed26eb25726cULL;
  static const uint64_t static_value2 = 0x663dac7efa05cc61ULL;
};

template<class ContainerAllocator>
struct DataType< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xarm_msgs/MoveVelocityRequest";
  }

  static const char* value(const ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
float32[] speeds\n\
\n\
\n\
\n\
bool is_sync\n\
\n\
\n\
\n\
bool is_tool_coord\n\
\n\
\n\
\n\
\n\
\n\
\n\
float32 duration\n\
\n\
";
  }

  static const char* value(const ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speeds);
      stream.next(m.is_sync);
      stream.next(m.is_tool_coord);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveVelocityRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xarm_msgs::MoveVelocityRequest_<ContainerAllocator>& v)
  {
    s << indent << "speeds[]" << std::endl;
    for (size_t i = 0; i < v.speeds.size(); ++i)
    {
      s << indent << "  speeds[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.speeds[i]);
    }
    s << indent << "is_sync: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_sync);
    s << indent << "is_tool_coord: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_tool_coord);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XARM_MSGS_MESSAGE_MOVEVELOCITYREQUEST_H
